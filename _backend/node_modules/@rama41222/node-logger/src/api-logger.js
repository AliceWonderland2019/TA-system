const uuidv4 = require('uuid/v4');

function KoaAPILogMiddleware(logger, config) {
  return async (ctx, next) => {
    const id = uuidv4();
    const requestLog = {
      id,
      date: new Date(),
      method: ctx.method,
      header: ctx.request.headers,
      params: ctx.request.params,
      body: ctx.request.body,
      ip: ctx.ip,
    };

    if (config.request) {
      logger.info(JSON.stringify(requestLog));
    }

    try {
      await next();
    } catch (err) {
      logger.error(`${id} ${new Date()} ${err.message}`);
      throw err;
    }

    const { length } = ctx.response;
    const { body } = ctx;

    if (length === null && body && body.readable) {
      ctx.body = body.on('error', ctx.onerror);
    }

    const responseLog = {
      id,
      date: new Date(),
      data: ctx.response,
      body: ctx.body,
    };

    if (config.response) {
      logger.info(JSON.stringify(responseLog));
    }
  };
}

function ExpressAPILogMiddleware(logger, config) {
  return async (req, res, next) => {
    const id = uuidv4();
    const requestLog = {
      id,
      type: 'request',
      date: new Date(),
      body: req.body,
      method: req.method,
      header: req.headers,
      params: req.params,
      query: req.query,
      ip: req.ip,
      files: req.files,
    };

    if (config.request) {
      logger.info(JSON.stringify(requestLog));
    }

    try {
      await next();
    } catch (err) {
      logger.error(`${id} ${new Date()} ${err.message}`);
      throw err;
    }
  };
}

module.exports = {
  KoaAPILogMiddleware,
  ExpressAPILogMiddleware,
};
